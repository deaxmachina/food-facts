{"ast":null,"code":"var _jsxFileName = \"/Users/dea/Code/Projects/react_foodfacts2/complete/src/Components/Chart.js\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Card } from \"@material-ui/core\";\nimport React from 'react';\nimport { Radar, RadarChart, PolarGrid, Legend, PolarAngleAxis, PolarRadiusAxis, ResponsiveContainer } from 'recharts';\nconst dataRaw = [{\n  id: 0,\n  name: 'Frozen yoghurt',\n  calories: 159,\n  fat: 5,\n  carbs: 85,\n  protein: 34,\n  fiber: 10\n}, {\n  id: 1,\n  name: 'Ice cream sandwich',\n  calories: 237,\n  fat: 33,\n  carbs: 23,\n  protein: 100,\n  fiber: 20\n}, {\n  id: 2,\n  name: 'Eclair',\n  calories: 262,\n  fat: 4,\n  carbs: 45,\n  protein: 6,\n  fiber: 30\n}];\nconst nutrients = [\"calories\", \"fat\", \"carbs\", \"protein\", \"fiber\"];\nconst ids = dataRaw.map(obj => obj.id);\nconst names = dataRaw.map(obj => obj.name);\nconst calories = dataRaw.map(obj => obj.calories);\nconst fat = dataRaw.map(obj => obj.fat);\nconst carbs = dataRaw.map(obj => obj.carbs);\nconst protein = dataRaw.map(obj => obj.protein);\nconst fiber = dataRaw.map(obj => obj.fiber);\nconst dataFormatted = {\n  ids: ids,\n  names: names,\n  calories: calories,\n  fat: fat,\n  carbs: carbs,\n  protein: protein,\n  fiber: fiber\n};\nlet dataTransfromed = [];\n\nfor (const nurt of nutrients) {\n  var result = {};\n  dataFormatted.ids.forEach((id, i) => result[id] = dataFormatted[nurt][i]);\n  dataTransfromed.push({\n    nutrient: nurt,\n    ...result,\n    max: Math.max(...dataFormatted[nurt])\n  });\n}\n\n;\nconsole.log(dataTransfromed);\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 600,\n    minWidth: 270,\n    height: 500\n  }\n});\nconst realData = [{\n  nutrient: \"calories\",\n  apple: 52,\n  banana: 89,\n  kiwi: 61,\n  max: 89\n}, {\n  nutrient: \"fat\",\n  apple: 0.17,\n  banana: 0.33,\n  kiwi: 0.52,\n  max: 0.52\n}, {\n  nutrient: \"carbs\",\n  apple: 13.81,\n  banana: 22.84,\n  kiwi: 14.66,\n  max: 22.84\n}, {\n  nutrient: \"proteins\",\n  apple: 0.26,\n  banana: 1.09,\n  kiwi: 1.14,\n  max: 1.14\n}, {\n  nutrient: \"fiber\",\n  apple: 2.4,\n  banana: 2.6,\n  kiwi: 3,\n  max: 3\n}]; //const data = [\"frist\", \"second\", \"third\", \"fourth\"]\n//const fills = [\"#8884d8\", \"#82ca9d\", \"#edb2c2\"]\n//data.slice(0,3).map((item, id) => (<Radar name={id} dataKey={id} fill={fills[id]} fillOpacity={0.6} />)\n//        {props.foodTransformed.map((item, id) => (<Radar name={id} dataKey={id} fill={fills[id]} fillOpacity={0.6} />))}\n\nfunction MyRadarChart(props) {\n  const styles = useStyles();\n  const fills = [\"#8884d8\", \"#82ca9d\", \"#edb2c2\"];\n  return /*#__PURE__*/React.createElement(Card, {\n    className: styles.root,\n    elevation: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ResponsiveContainer, {\n    width: \"99%\",\n    height: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(RadarChart, {\n    outerRadius: \"70%\",\n    data: realData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(PolarGrid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(PolarAngleAxis, {\n    dataKey: \"nutrient\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(PolarRadiusAxis, {\n    angle: 30,\n    domain: [0, 100],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Radar, {\n    name: \"Apple\",\n    dataKey: \"apple\",\n    fill: \"#8884d8\",\n    fillOpacity: 0.6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Radar, {\n    name: \"Banana\",\n    dataKey: \"banana\",\n    fill: \"#82ca9d\",\n    fillOpacity: 0.6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Radar, {\n    name: \"Kiwi\",\n    dataKey: \"kiwi\",\n    fill: \"#edb2c2\",\n    fillOpacity: 0.6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Legend, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }))));\n}\n\nconst data = [{\n  subject: 'Math',\n  A: 120,\n  B: 110,\n  fullMark: 150\n}, {\n  subject: 'Chinese',\n  A: 98,\n  B: 130,\n  fullMark: 150\n}, {\n  subject: 'English',\n  A: 86,\n  B: 130,\n  fullMark: 150\n}, {\n  subject: 'Geography',\n  A: 99,\n  B: 100,\n  fullMark: 150\n}, {\n  subject: 'Physics',\n  A: 85,\n  B: 90,\n  fullMark: 150\n}, {\n  subject: 'History',\n  A: 65,\n  B: 85,\n  fullMark: 150\n}];\n\nfunction OtherChart() {\n  return /*#__PURE__*/React.createElement(RadarChart, {\n    cx: 300,\n    cy: 250,\n    outerRadius: 150,\n    width: 600,\n    height: 500,\n    data: data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(PolarGrid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(PolarAngleAxis, {\n    dataKey: \"subject\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(PolarRadiusAxis, {\n    angle: 30,\n    domain: [0, 150],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Radar, {\n    name: \"Mike\",\n    dataKey: \"A\",\n    stroke: \"#8884d8\",\n    fill: \"#8884d8\",\n    fillOpacity: 0.6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Radar, {\n    name: \"Lily\",\n    dataKey: \"B\",\n    stroke: \"#82ca9d\",\n    fill: \"#82ca9d\",\n    fillOpacity: 0.6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Legend, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }\n  }));\n}\n\nexport default OtherChart;","map":{"version":3,"sources":["/Users/dea/Code/Projects/react_foodfacts2/complete/src/Components/Chart.js"],"names":["makeStyles","Card","React","Radar","RadarChart","PolarGrid","Legend","PolarAngleAxis","PolarRadiusAxis","ResponsiveContainer","dataRaw","id","name","calories","fat","carbs","protein","fiber","nutrients","ids","map","obj","names","dataFormatted","dataTransfromed","nurt","result","forEach","i","push","nutrient","max","Math","console","log","useStyles","root","maxWidth","minWidth","height","realData","apple","banana","kiwi","MyRadarChart","props","styles","fills","data","subject","A","B","fullMark","OtherChart"],"mappings":"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","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\nimport { Card } from \"@material-ui/core\";\nimport React from 'react';\nimport {\n  Radar, RadarChart, PolarGrid, Legend,\n  PolarAngleAxis, PolarRadiusAxis, ResponsiveContainer\n} from 'recharts';\n\n\n\nconst dataRaw = [\n  { id:0, name: 'Frozen yoghurt', calories: 159, fat: 5, carbs: 85, protein:34, fiber: 10 },\n  { id:1, name: 'Ice cream sandwich', calories: 237, fat: 33, carbs: 23, protein: 100, fiber: 20 },\n  { id:2, name: 'Eclair', calories: 262, fat: 4, carbs: 45, protein:6, fiber: 30 }\n]\n\nconst nutrients = [\"calories\", \"fat\", \"carbs\", \"protein\", \"fiber\"]\nconst ids = dataRaw.map(obj => obj.id)\nconst names = dataRaw.map(obj => obj.name)\nconst calories = dataRaw.map(obj => obj.calories)\nconst fat = dataRaw.map(obj => obj.fat)\nconst carbs = dataRaw.map(obj => obj.carbs);\nconst protein = dataRaw.map(obj => obj.protein);\nconst fiber = dataRaw.map(obj => obj.fiber);\nconst dataFormatted = {\n  ids: ids, names: names, calories: calories, fat: fat, carbs: carbs, protein: protein, fiber:fiber\n};\n\nlet dataTransfromed = []\nfor (const nurt of nutrients) {\n  var result = {};\n  dataFormatted.ids.forEach((id, i) => result[id] = dataFormatted[nurt][i]);\n  dataTransfromed.push({nutrient: nurt, ...result, max: Math.max(...dataFormatted[nurt])})\n};\n\nconsole.log(dataTransfromed)\n\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 600,\n    minWidth: 270,\n    height: 500\n  }\n})\n\nconst realData = [\n  {nutrient: \"calories\", apple: 52, banana: 89, kiwi: 61, max: 89},\n  {nutrient: \"fat\", apple: 0.17, banana: 0.33, kiwi: 0.52, max: 0.52},\n  {nutrient: \"carbs\", apple: 13.81, banana: 22.84, kiwi: 14.66, max: 22.84},\n  {nutrient: \"proteins\", apple: 0.26, banana: 1.09, kiwi: 1.14, max: 1.14},\n  {nutrient: \"fiber\", apple: 2.4, banana: 2.6, kiwi: 3, max: 3}\n]\n\n//const data = [\"frist\", \"second\", \"third\", \"fourth\"]\n//const fills = [\"#8884d8\", \"#82ca9d\", \"#edb2c2\"]\n//data.slice(0,3).map((item, id) => (<Radar name={id} dataKey={id} fill={fills[id]} fillOpacity={0.6} />)\n//        {props.foodTransformed.map((item, id) => (<Radar name={id} dataKey={id} fill={fills[id]} fillOpacity={0.6} />))}\n\nfunction MyRadarChart(props) {\n    const styles = useStyles();\n    const fills = [\"#8884d8\", \"#82ca9d\", \"#edb2c2\"];\n\n    return (\n\n      <Card className={styles.root} elevation={6}>\n      <ResponsiveContainer width=\"99%\" height=\"100%\">  \n      <RadarChart outerRadius={\"70%\"}  data={realData}>\n        <PolarGrid />\n        <PolarAngleAxis dataKey=\"nutrient\" />\n        <PolarRadiusAxis angle={30} domain={[0, 100]} />\n\n        <Radar name=\"Apple\" dataKey=\"apple\" fill=\"#8884d8\" fillOpacity={0.6} />\n        <Radar name=\"Banana\" dataKey=\"banana\" fill=\"#82ca9d\" fillOpacity={0.6} />\n        <Radar name=\"Kiwi\" dataKey=\"kiwi\" fill=\"#edb2c2\" fillOpacity={0.6} />\n\n\n        <Legend />\n      </RadarChart>\n      </ResponsiveContainer>\n      </Card>\n\n    );\n  }\n\n  const data = [\n    { subject: 'Math', A: 120, B: 110, fullMark: 150 },\n    { subject: 'Chinese', A: 98, B: 130, fullMark: 150 },\n    { subject: 'English', A: 86, B: 130, fullMark: 150 },\n    { subject: 'Geography', A: 99, B: 100, fullMark: 150 },\n    { subject: 'Physics', A: 85, B: 90, fullMark: 150 },\n    { subject: 'History', A: 65, B: 85, fullMark: 150 },\n];\n\nfunction OtherChart(){\n  return (\n    <RadarChart cx={300} cy={250} outerRadius={150} width={600} height={500} data={data}>\n    <PolarGrid />\n    <PolarAngleAxis dataKey=\"subject\" />\n    <PolarRadiusAxis angle={30} domain={[0, 150]}/>\n    <Radar name=\"Mike\" dataKey=\"A\" stroke=\"#8884d8\" fill=\"#8884d8\" fillOpacity={0.6}/>\n    <Radar name=\"Lily\" dataKey=\"B\" stroke=\"#82ca9d\" fill=\"#82ca9d\" fillOpacity={0.6}/>\n    <Legend />\n    \n  </RadarChart>\n  )\n}\n\nexport default OtherChart;\n\n"]},"metadata":{},"sourceType":"module"}