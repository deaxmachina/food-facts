{"ast":null,"code":"var _jsxFileName = \"/Users/dea/Code/Projects/react_foodfacts2/complete/src/Components/Chart.js\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Card, CardContent, CardActions, CardActionArea, Button } from \"@material-ui/core\";\nimport React, { useState, useEffect } from 'react';\nimport { Radar, RadarChart, PolarGrid, Legend, PolarAngleAxis, PolarRadiusAxis, ResponsiveContainer, XAxis, Label } from 'recharts'; // example of data format \n\n/*\nconst realData = [\n  {nutrient: \"calories\", apple: 52, banana: 50, kiwi: 61, max: 89},\n  {nutrient: \"fat\", apple: 0.17, banana: 0.33, kiwi: 50.52, max: 0.52},\n  {nutrient: \"carbs\", apple: 13.81, banana: 22.84, kiwi: 74.66, max: 22.84},\n  {nutrient: \"proteins\", apple: 0.26, banana: 81.09, kiwi: 1.14, max: 1.14},\n  {nutrient: \"fiber\", apple: 2.4, banana: 82.6, kiwi: 3, max: 3}\n]\n*/\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 600,\n    minWidth: 270,\n    height: 500\n  }\n});\n\nfunction MyRadarChart(props) {\n  const styles = useStyles();\n  const fills = [\"#8884d8\", \"#82ca9d\", \"#edb2c2\"]; //array of the current foods \n\n  function getFoods(data) {\n    return Object.keys(data).filter(el => el !== \"nutrient\" && el !== \"max\");\n  }\n\n  const currentFoods = getFoods(props.data[0]);\n  let foodOpacities = [];\n  currentFoods.forEach(food => foodOpacities.push([food, 0.4]));\n  foodOpacities = Object.fromEntries(foodOpacities); //console.log(foodOpacities)\n  //const [opacity, setOpacity] = useState(0.6);\n\n  const [opacities, setOpacities] = useState(foodOpacities);\n  useEffect(() => {\n    console.log(opacities);\n  }, []);\n\n  function handleLegendClick(e) {\n    const {\n      dataKey\n    } = e;\n    console.log(e);\n    setOpacities({ ...foodOpacities,\n      [dataKey]: 0.9\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(Card, {\n    className: styles.root,\n    elevation: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ResponsiveContainer, {\n    width: \"99%\",\n    height: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(RadarChart, {\n    outerRadius: \"70%\",\n    data: props.data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(PolarGrid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(PolarAngleAxis, {\n    dataKey: \"nutrient\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(PolarRadiusAxis, {\n    angle: 30,\n    domain: [0, 20],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 15\n    }\n  }), currentFoods.map((food, id) => /*#__PURE__*/React.createElement(Radar, {\n    key: id,\n    name: food,\n    dataKey: food,\n    fill: fills[id],\n    fillOpacity: opacities[food],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }\n  })), \"r\", /*#__PURE__*/React.createElement(Legend, {\n    onClick: handleLegendClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 15\n    }\n  }))));\n}\n\nexport default MyRadarChart;","map":{"version":3,"sources":["/Users/dea/Code/Projects/react_foodfacts2/complete/src/Components/Chart.js"],"names":["makeStyles","Card","CardContent","CardActions","CardActionArea","Button","React","useState","useEffect","Radar","RadarChart","PolarGrid","Legend","PolarAngleAxis","PolarRadiusAxis","ResponsiveContainer","XAxis","Label","useStyles","root","maxWidth","minWidth","height","MyRadarChart","props","styles","fills","getFoods","data","Object","keys","filter","el","currentFoods","foodOpacities","forEach","food","push","fromEntries","opacities","setOpacities","console","log","handleLegendClick","e","dataKey","map","id"],"mappings":"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","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\nimport { Card, CardContent, CardActions, CardActionArea, Button } from \"@material-ui/core\";\nimport React, { useState, useEffect } from 'react';\nimport {\n  Radar, RadarChart, PolarGrid, Legend,\n  PolarAngleAxis, PolarRadiusAxis, ResponsiveContainer, XAxis, Label\n} from 'recharts';\n\n\n// example of data format \n/*\nconst realData = [\n  {nutrient: \"calories\", apple: 52, banana: 50, kiwi: 61, max: 89},\n  {nutrient: \"fat\", apple: 0.17, banana: 0.33, kiwi: 50.52, max: 0.52},\n  {nutrient: \"carbs\", apple: 13.81, banana: 22.84, kiwi: 74.66, max: 22.84},\n  {nutrient: \"proteins\", apple: 0.26, banana: 81.09, kiwi: 1.14, max: 1.14},\n  {nutrient: \"fiber\", apple: 2.4, banana: 82.6, kiwi: 3, max: 3}\n]\n*/\n\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 600,\n    minWidth: 270,\n    height: 500\n  }\n})\n\n\nfunction MyRadarChart(props) {\n    const styles = useStyles();\n    const fills = [\"#8884d8\", \"#82ca9d\", \"#edb2c2\"];\n\n    //array of the current foods \n    function getFoods(data){\n      return Object.keys(data).filter(el => el!==\"nutrient\"&&el!==\"max\")\n    }\n    const currentFoods = getFoods(props.data[0])\n    let foodOpacities = [];\n    currentFoods.forEach(food => foodOpacities.push([food, 0.4]))\n    foodOpacities = Object.fromEntries(foodOpacities)\n    //console.log(foodOpacities)\n\n    //const [opacity, setOpacity] = useState(0.6);\n    const [opacities, setOpacities] = useState(foodOpacities)\n\n    useEffect(() => {\n      console.log(opacities)\n    }, [])\n\n\n    function handleLegendClick(e){\n      const { dataKey } = e\n      console.log(e)\n      setOpacities({...foodOpacities, [dataKey]: 0.9});\n    }\n\n\n\n    return (    \n      <Card className={styles.root} elevation={6}>\n        <ResponsiveContainer width=\"99%\" height=\"100%\">\n            <RadarChart outerRadius={\"70%\"}  data={props.data} >\n              <PolarGrid />\n              <PolarAngleAxis dataKey=\"nutrient\" />\n              <PolarRadiusAxis angle={30} domain={[0, 20]} />\n\n              {currentFoods.map((food, id) => (\n                <Radar key={id} name={food} dataKey={food} fill={fills[id]} fillOpacity={opacities[food]} />))}\nr\n            {/* \n              <Radar name=\"Apple\" dataKey=\"apple\" fill=\"#8884d8\" fillOpacity={0.6} />\n              <Radar name=\"Banana\" dataKey=\"banana\" fill=\"#82ca9d\" fillOpacity={0.6} />\n              <Radar name=\"Kiwi\" dataKey=\"kiwi\" fill=\"#edb2c2\" fillOpacity={0.6} />\n            */} \n              <Legend onClick={handleLegendClick}/>\n            </RadarChart> \n        </ResponsiveContainer>        \n      </Card>\n      \n    );\n  }\n\n\n\nexport default MyRadarChart;\n\n"]},"metadata":{},"sourceType":"module"}