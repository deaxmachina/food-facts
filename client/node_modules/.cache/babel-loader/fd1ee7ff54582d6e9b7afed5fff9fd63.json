{"ast":null,"code":"var _jsxFileName = \"/Users/dea/Code/Projects/react_foodfacts2/complete/src/Components/Chart.js\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Card } from \"@material-ui/core\";\nimport React from 'react';\nimport { Radar, RadarChart, PolarGrid, Legend, PolarAngleAxis, PolarRadiusAxis, ResponsiveContainer } from 'recharts';\nconst dataRaw = [{\n  id: 0,\n  name: 'Frozen yoghurt',\n  calories: 159,\n  fat: 5,\n  carbs: 85,\n  protein: 34,\n  fiber: 10\n}, {\n  id: 1,\n  name: 'Ice cream sandwich',\n  calories: 237,\n  fat: 33,\n  carbs: 23,\n  protein: 100,\n  fiber: 20\n}, {\n  id: 2,\n  name: 'Eclair',\n  calories: 262,\n  fat: 4,\n  carbs: 45,\n  protein: 6,\n  fiber: 30\n}];\nconst nutrients = [\"calories\", \"fat\", \"carbs\", \"protein\", \"fiber\"];\nconst ids = dataRaw.map(obj => obj.id);\nconst names = dataRaw.map(obj => obj.name);\nconst calories = dataRaw.map(obj => obj.calories);\nconst fat = dataRaw.map(obj => obj.fat);\nconst carbs = dataRaw.map(obj => obj.carbs);\nconst protein = dataRaw.map(obj => obj.protein);\nconst fiber = dataRaw.map(obj => obj.fiber);\nconst dataFormatted = {\n  ids: ids,\n  names: names,\n  calories: calories,\n  fat: fat,\n  carbs: carbs,\n  protein: protein,\n  fiber: fiber\n};\nlet dataTransfromed = [];\n\nfor (const nurt of nutrients) {\n  var result = {};\n  dataFormatted.ids.forEach((id, i) => result[id] = dataFormatted[nurt][i]);\n  dataTransfromed.push({\n    nutrient: nurt,\n    ...result,\n    max: Math.max(...dataFormatted[nurt])\n  });\n}\n\n;\nconsole.log(dataTransfromed);\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 600,\n    minWidth: 270,\n    height: 500\n  }\n}); //const data = [\"frist\", \"second\", \"third\", \"fourth\"]\n//const fills = [\"#8884d8\", \"#82ca9d\", \"#edb2c2\"]\n//data.slice(0,3).map((item, id) => (<Radar name={id} dataKey={id} fill={fills[id]} fillOpacity={0.6} />)\n//        {props.foodTransformed.map((item, id) => (<Radar name={id} dataKey={id} fill={fills[id]} fillOpacity={0.6} />))}\n\nfunction MyRadarChart(props) {\n  const styles = useStyles();\n  const fills = [\"#8884d8\", \"#82ca9d\", \"#edb2c2\"];\n  return /*#__PURE__*/React.createElement(Card, {\n    className: styles.root,\n    elevation: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ResponsiveContainer, {\n    width: \"99%\",\n    height: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(RadarChart, {\n    outerRadius: \"70%\",\n    data: props.foodTransformed,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(PolarGrid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(PolarAngleAxis, {\n    dataKey: \"nutrient\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(PolarRadiusAxis, {\n    angle: 30,\n    domain: [0, 400],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Radar, {\n    name: \"Food0\",\n    dataKey: \"apple\",\n    fill: \"#8884d8\",\n    fillOpacity: 0.6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Radar, {\n    name: \"Food1\",\n    dataKey: \"banana\",\n    fill: \"#82ca9d\",\n    fillOpacity: 0.6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Radar, {\n    name: \"Food2\",\n    dataKey: \"kiwi\",\n    fill: \"#edb2c2\",\n    fillOpacity: 0.6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Legend, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }))));\n}\n\nexport default MyRadarChart;","map":{"version":3,"sources":["/Users/dea/Code/Projects/react_foodfacts2/complete/src/Components/Chart.js"],"names":["makeStyles","Card","React","Radar","RadarChart","PolarGrid","Legend","PolarAngleAxis","PolarRadiusAxis","ResponsiveContainer","dataRaw","id","name","calories","fat","carbs","protein","fiber","nutrients","ids","map","obj","names","dataFormatted","dataTransfromed","nurt","result","forEach","i","push","nutrient","max","Math","console","log","useStyles","root","maxWidth","minWidth","height","MyRadarChart","props","styles","fills","foodTransformed"],"mappings":"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","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\nimport { Card } from \"@material-ui/core\";\nimport React from 'react';\nimport {\n  Radar, RadarChart, PolarGrid, Legend,\n  PolarAngleAxis, PolarRadiusAxis, ResponsiveContainer\n} from 'recharts';\n\n\n\nconst dataRaw = [\n  { id:0, name: 'Frozen yoghurt', calories: 159, fat: 5, carbs: 85, protein:34, fiber: 10 },\n  { id:1, name: 'Ice cream sandwich', calories: 237, fat: 33, carbs: 23, protein: 100, fiber: 20 },\n  { id:2, name: 'Eclair', calories: 262, fat: 4, carbs: 45, protein:6, fiber: 30 }\n]\n\nconst nutrients = [\"calories\", \"fat\", \"carbs\", \"protein\", \"fiber\"]\nconst ids = dataRaw.map(obj => obj.id)\nconst names = dataRaw.map(obj => obj.name)\nconst calories = dataRaw.map(obj => obj.calories)\nconst fat = dataRaw.map(obj => obj.fat)\nconst carbs = dataRaw.map(obj => obj.carbs);\nconst protein = dataRaw.map(obj => obj.protein);\nconst fiber = dataRaw.map(obj => obj.fiber);\nconst dataFormatted = {\n  ids: ids, names: names, calories: calories, fat: fat, carbs: carbs, protein: protein, fiber:fiber\n};\n\nlet dataTransfromed = []\nfor (const nurt of nutrients) {\n  var result = {};\n  dataFormatted.ids.forEach((id, i) => result[id] = dataFormatted[nurt][i]);\n  dataTransfromed.push({nutrient: nurt, ...result, max: Math.max(...dataFormatted[nurt])})\n};\n\nconsole.log(dataTransfromed)\n\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 600,\n    minWidth: 270,\n    height: 500\n  }\n})\n\n//const data = [\"frist\", \"second\", \"third\", \"fourth\"]\n//const fills = [\"#8884d8\", \"#82ca9d\", \"#edb2c2\"]\n//data.slice(0,3).map((item, id) => (<Radar name={id} dataKey={id} fill={fills[id]} fillOpacity={0.6} />)\n//        {props.foodTransformed.map((item, id) => (<Radar name={id} dataKey={id} fill={fills[id]} fillOpacity={0.6} />))}\n\nfunction MyRadarChart(props) {\n    const styles = useStyles();\n    const fills = [\"#8884d8\", \"#82ca9d\", \"#edb2c2\"];\n\n    return (\n\n      <Card className={styles.root} elevation={6}>\n      <ResponsiveContainer width=\"99%\" height=\"100%\">  \n      <RadarChart outerRadius={\"70%\"}  data={props.foodTransformed}>\n        <PolarGrid />\n        <PolarAngleAxis dataKey={\"nutrient\"} />\n        <PolarRadiusAxis angle={30} domain={[0, 400]} />\n\n\n\n\n        <Radar name=\"Food0\" dataKey={\"apple\"} fill=\"#8884d8\" fillOpacity={0.6} />\n        <Radar name=\"Food1\" dataKey={\"banana\"} fill=\"#82ca9d\" fillOpacity={0.6} />\n        <Radar name=\"Food2\" dataKey={\"kiwi\"} fill=\"#edb2c2\" fillOpacity={0.6} />\n\n\n        <Legend />\n      </RadarChart>\n      </ResponsiveContainer>\n      </Card>\n\n    );\n  }\n\nexport default MyRadarChart;\n\n"]},"metadata":{},"sourceType":"module"}