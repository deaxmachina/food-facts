{"ast":null,"code":"/*\nconst dataRaw = [\n  { id:0, name: 'Frozen yoghurt', calories: 159, fat: 5, carbs: 85, protein:34, fiber: 10 },\n  { id:1, name: 'Ice cream sandwich', calories: 237, fat: 33, carbs: 23, protein: 100, fiber: 20 },\n  { id:2, name: 'Eclair', calories: 262, fat: 4, carbs: 45, protein:6, fiber: 30 }\n*/\nfunction dataTransform(dataRaw) {\n  if (dataRaw.length !== 0) {\n    const dataAttr = [\"food\", \"PROCNT\", \"FIBTG\", \"FAT\", \"ENERC_KCAL\", \"CHOCDF\"];\n    const food = dataRaw.map(obj => obj.food);\n    const proteins = dataRaw.map(obj => obj.PROCNT);\n    const fiber = dataRaw.map(obj => obj.FIBTG);\n    const fat = dataRaw.map(obj => obj.FAT); //const calories = dataRaw.map(obj => obj.ENERC_KCAL)\n\n    const carbs = dataRaw.map(obj => obj.CHOCDF);\n    const dataFormatted = {\n      food,\n      proteins,\n      fiber,\n      fat,\n      calories,\n      carbs\n    }; //const nutrients = [\"calories\", \"fat\", \"carbs\", \"proteins\", \"fiber\"]\n\n    const nutrients = [\"fat\", \"carbs\", \"proteins\", \"fiber\"];\n    let dataTransformed = [];\n\n    for (const nurt of nutrients) {\n      var result = {};\n      dataFormatted.food.forEach((id, i) => result[id] = dataFormatted[nurt][i]);\n      dataTransformed.push({\n        nutrient: nurt,\n        ...result,\n        max: Math.max(...dataFormatted[nurt])\n      });\n    }\n\n    ;\n    return dataTransformed;\n  } else {\n    return dataRaw;\n  }\n}\n\n;\nexport default dataTransform;","map":{"version":3,"sources":["/Users/dea/Code/Projects/react_foodfacts2/complete/src/Functionality/data.js"],"names":["dataTransform","dataRaw","length","dataAttr","food","map","obj","proteins","PROCNT","fiber","FIBTG","fat","FAT","carbs","CHOCDF","dataFormatted","calories","nutrients","dataTransformed","nurt","result","forEach","id","i","push","nutrient","max","Math"],"mappings":"AAAA;;;;;;AAOA,SAASA,aAAT,CAAuBC,OAAvB,EAA+B;AAC7B,MAAIA,OAAO,CAACC,MAAR,KAAkB,CAAtB,EAAyB;AACvB,UAAMC,QAAQ,GAAG,CAAC,MAAD,EAAS,QAAT,EAAmB,OAAnB,EAA2B,KAA3B,EAAkC,YAAlC,EAAgD,QAAhD,CAAjB;AACA,UAAMC,IAAI,GAAGH,OAAO,CAACI,GAAR,CAAYC,GAAG,IAAIA,GAAG,CAACF,IAAvB,CAAb;AACA,UAAMG,QAAQ,GAAGN,OAAO,CAACI,GAAR,CAAYC,GAAG,IAAIA,GAAG,CAACE,MAAvB,CAAjB;AACA,UAAMC,KAAK,GAAGR,OAAO,CAACI,GAAR,CAAYC,GAAG,IAAIA,GAAG,CAACI,KAAvB,CAAd;AACA,UAAMC,GAAG,GAAGV,OAAO,CAACI,GAAR,CAAYC,GAAG,IAAIA,GAAG,CAACM,GAAvB,CAAZ,CALuB,CAMvB;;AACA,UAAMC,KAAK,GAAGZ,OAAO,CAACI,GAAR,CAAYC,GAAG,IAAIA,GAAG,CAACQ,MAAvB,CAAd;AACA,UAAMC,aAAa,GAAG;AAACX,MAAAA,IAAD;AAAOG,MAAAA,QAAP;AAAiBE,MAAAA,KAAjB;AAAwBE,MAAAA,GAAxB;AAA6BK,MAAAA,QAA7B;AAAuCH,MAAAA;AAAvC,KAAtB,CARuB,CAUvB;;AACA,UAAMI,SAAS,GAAG,CAAC,KAAD,EAAQ,OAAR,EAAiB,UAAjB,EAA6B,OAA7B,CAAlB;AACA,QAAIC,eAAe,GAAG,EAAtB;;AACA,SAAK,MAAMC,IAAX,IAAmBF,SAAnB,EAA8B;AAC5B,UAAIG,MAAM,GAAG,EAAb;AACAL,MAAAA,aAAa,CAACX,IAAd,CAAmBiB,OAAnB,CAA2B,CAACC,EAAD,EAAKC,CAAL,KAAWH,MAAM,CAACE,EAAD,CAAN,GAAaP,aAAa,CAACI,IAAD,CAAb,CAAoBI,CAApB,CAAnD;AACAL,MAAAA,eAAe,CAACM,IAAhB,CAAqB;AAACC,QAAAA,QAAQ,EAAEN,IAAX;AAAiB,WAAGC,MAApB;AAA4BM,QAAAA,GAAG,EAAEC,IAAI,CAACD,GAAL,CAAS,GAAGX,aAAa,CAACI,IAAD,CAAzB;AAAjC,OAArB;AACD;;AAAA;AACD,WAAOD,eAAP;AACD,GAnBD,MAmBO;AACL,WAAOjB,OAAP;AACD;AACF;;AAAA;AAED,eAAeD,aAAf","sourcesContent":["/*\nconst dataRaw = [\n  { id:0, name: 'Frozen yoghurt', calories: 159, fat: 5, carbs: 85, protein:34, fiber: 10 },\n  { id:1, name: 'Ice cream sandwich', calories: 237, fat: 33, carbs: 23, protein: 100, fiber: 20 },\n  { id:2, name: 'Eclair', calories: 262, fat: 4, carbs: 45, protein:6, fiber: 30 }\n*/\n\nfunction dataTransform(dataRaw){\n  if (dataRaw.length !==0) {\n    const dataAttr = [\"food\", \"PROCNT\", \"FIBTG\",\"FAT\", \"ENERC_KCAL\", \"CHOCDF\"]\n    const food = dataRaw.map(obj => obj.food)\n    const proteins = dataRaw.map(obj => obj.PROCNT)\n    const fiber = dataRaw.map(obj => obj.FIBTG)\n    const fat = dataRaw.map(obj => obj.FAT)\n    //const calories = dataRaw.map(obj => obj.ENERC_KCAL)\n    const carbs = dataRaw.map(obj => obj.CHOCDF)\n    const dataFormatted = {food, proteins, fiber, fat, calories, carbs}\n    \n    //const nutrients = [\"calories\", \"fat\", \"carbs\", \"proteins\", \"fiber\"]\n    const nutrients = [\"fat\", \"carbs\", \"proteins\", \"fiber\"]\n    let dataTransformed = []\n    for (const nurt of nutrients) {\n      var result = {};\n      dataFormatted.food.forEach((id, i) => result[id] = dataFormatted[nurt][i]);\n      dataTransformed.push({nutrient: nurt, ...result, max: Math.max(...dataFormatted[nurt])})\n    };\n    return dataTransformed\n  } else {\n    return dataRaw\n  }\n};\n\nexport default dataTransform; \n"]},"metadata":{},"sourceType":"module"}