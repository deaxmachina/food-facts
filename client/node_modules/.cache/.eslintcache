[{"/Users/dea/Code/Projects/nutrition-dashboard/client/src/index.js":"1","/Users/dea/Code/Projects/nutrition-dashboard/client/src/App.js":"2","/Users/dea/Code/Projects/nutrition-dashboard/client/src/Components/CaloriesChart.js":"3","/Users/dea/Code/Projects/nutrition-dashboard/client/src/Components/SearchBox.js":"4","/Users/dea/Code/Projects/nutrition-dashboard/client/src/Components/RadarChart.js":"5","/Users/dea/Code/Projects/nutrition-dashboard/client/src/Components/Header.js":"6","/Users/dea/Code/Projects/nutrition-dashboard/client/src/Components/ImgMediaCard.js":"7","/Users/dea/Code/Projects/nutrition-dashboard/client/src/Components/BarChart.js":"8","/Users/dea/Code/Projects/nutrition-dashboard/client/src/Components/Chart.js":"9","/Users/dea/Code/Projects/nutrition-dashboard/client/src/Functionality/data.js":"10","/Users/dea/Code/Projects/nutrition-dashboard/client/src/Functionality/api.js":"11","/Users/dea/Code/Projects/nutrition-dashboard/client/src/Components/Table.js":"12"},{"size":152,"mtime":1615180245244,"results":"13","hashOfConfig":"14"},{"size":5725,"mtime":1615180245243,"results":"15","hashOfConfig":"14"},{"size":4002,"mtime":1615180245243,"results":"16","hashOfConfig":"14"},{"size":648,"mtime":1615180245243,"results":"17","hashOfConfig":"14"},{"size":3321,"mtime":1615180245243,"results":"18","hashOfConfig":"14"},{"size":1645,"mtime":1615180245243,"results":"19","hashOfConfig":"14"},{"size":1925,"mtime":1615180245243,"results":"20","hashOfConfig":"14"},{"size":4272,"mtime":1615180245243,"results":"21","hashOfConfig":"14"},{"size":3074,"mtime":1615180245243,"results":"22","hashOfConfig":"14"},{"size":1380,"mtime":1615180245244,"results":"23","hashOfConfig":"14"},{"size":626,"mtime":1615180245244,"results":"24","hashOfConfig":"14"},{"size":2522,"mtime":1615180245243,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"tbkdm5",{"filePath":"28","messages":"29","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},"/Users/dea/Code/Projects/nutrition-dashboard/client/src/index.js",[],"/Users/dea/Code/Projects/nutrition-dashboard/client/src/App.js",["58","59","60","61"],"import React, {useState} from \"react\";\nimport { Paper, Grid, createMuiTheme, ThemeProvider, Box} from \"@material-ui/core\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport SearchBox from \"./Components/SearchBox\";\nimport ImgMediaCard from \"./Components/ImgMediaCard\";\nimport Chart from \"./Components/Chart\";\nimport Header from \"./Components/Header\";\nimport MyResponsiveBar from \"./Components/BarChart\";\nimport CaloriesChart from \"./Components/CaloriesChart\";\nimport RadarChart from \"./Components/RadarChart\";\nimport styles from \"./App.module.css\";\nimport getData from \"./Functionality/api\";\nimport dataTrasform from \"./Functionality/data\";\n\n//utility function \nfunction isNotEmpty(obj) {\n  for(var key in obj) {\n      if(obj.hasOwnProperty(key))\n          return true;\n  }\n  return false;\n}\n\n\nfunction App() {\n\n  /* FUNCTIONALITY */\n\n  /*** Data handling functionality ***/\n\n  const [userInput, setUserInput] = useState(\"\"); //user input into the search for food form\n  const [foodNames, setFoodNames] = useState([]); //current list of food names\n  const [foodData, setFoodData] = useState([]); //current list of food data\n  const [selectedFoodData, setSelectedFoodData] = useState([]); //list of selected food data \n  const [foodTransformed, setFoodTransformed] = useState([]);\n\n\n  // keep track of the current user input into input field\n  function handleUserInput(event){\n    const input = event.target.value;\n    setUserInput(input);\n  }\n\n  //get food info button clicked -> get nutrition data from api and save it in foodNames and foodData\n  async function keepFoods(){\n    try {\n      if (foodData.length<5){\n        const nutrients = await(getData(userInput));\n        if (isNotEmpty(nutrients)){\n          if (!foodNames.includes(userInput)){\n            setFoodNames(prevItem => {\n              return [...foodNames, userInput]\n            });\n            setFoodData(prevItem => {\n              return [...foodData, nutrients]\n            })\n          } \n        }\n      }\n    } catch (error) {\n      console.log(\"Missing food\")\n    }\n    setUserInput(\"\");\n  };\n\n   // see if the checkbox next to each item is checked \n  // if checked, keep the fooddata in the selectedFoodData state; else delete it from there\n  function handleChecked(event, foodId){\n    if (event.target.checked){\n      keepSelectedFoods(foodId)\n    } else {\n      setSelectedFoodData(prevItems => {\n        return prevItems.filter((item, index) => {\n          const currentFood = foodNames[foodId];\n          const currentFoodData = foodData.find(x => x.food === currentFood);\n          return item !== currentFoodData;\n        });\n      });\n    };\n  };\n\n  //keep list of clicked (checked) foods, without repetition\n  function keepSelectedFoods(foodId) {\n    const currentFood = foodNames[foodId];\n    const currentFoodData = foodData.find(x => x.food === currentFood);\n    setSelectedFoodData(prevItems => {\n      if (!prevItems.includes(currentFoodData)){\n        return [...prevItems, currentFoodData]\n      } else {\n        return prevItems\n      }\n    });\n  };\n\n  // transform the data into format expected by chart\n  function handleDataTransform(){\n    console.log(selectedFoodData)\n    const foodDataTransformed = dataTrasform(selectedFoodData)\n    setFoodTransformed(foodDataTransformed);\n  }  \n\n  //clear all the stored food data on clicking \"clear table\"\n  function handleClearTable(){\n    setFoodData([])\n    setFoodNames([])\n    setSelectedFoodData([])\n    setFoodTransformed([])\n  };\n\n  /* THEME */\n\n  const [darkMode, setDarkMode] = useState(true); \n  const theme = createMuiTheme({\n    palette: {\n      type: darkMode ? \"dark\" : \"light\",\n    },\n  });\n\n  const useStyles = makeStyles({\n    root: {\n      margin: 0,\n      padding: 0,\n      height: \"100%\",\n      background: \"linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)\",\n    },\n  });\n\n  const classes = useStyles();\n\n\n\n  return(\n    <ThemeProvider theme={theme}>\n      <Paper className={classes.root} square={true} elevation={0} >\n        <Grid container justify=\"center\" alignItems=\"center\"  direction=\"row\" spacing={0}>\n\n          <Grid item xs={12}>\n            <Header \n              darkMode={darkMode}\n              setDarkMode={setDarkMode}\n            />\n          </Grid>\n\n          <Grid item container justify=\"center\" alignItems=\"center\" xs={11} sm={11} md={12}>\n            <SearchBox \n              handleUserInput={handleUserInput}\n              userInput={userInput}\n              keepFoods={keepFoods}\n            />\n          </Grid>\n\n          <Grid item container justify=\"center\" xs={11} sm={11} md={12}>\n              <ImgMediaCard \n                data={foodData}\n                handleChecked={handleChecked}\n                handleDataTransform={handleDataTransform}\n                handleClearTable={handleClearTable}\n                image={\"https://images.unsplash.com/photo-1506395308321-904a71783d60?ixlib=rb-1.2.1&auto=format&fit=crop&w=930&q=80\"}\n              />\n          </Grid>\n\n\n\n        {isNotEmpty(foodTransformed)? \n        <Grid container justify=\"center\"  > \n          <Grid item xs={11} sm={11} md={5} lg={4}>\n            <MyResponsiveBar data={foodTransformed}/>\n          </Grid>\n          <Grid item xs={11} sm={11} md={5} lg={4}>\n            <RadarChart data={foodTransformed}/>\n          </Grid>\n          <Grid item xs={11} sm={11} md={10} lg={8}>\n            <CaloriesChart data={foodTransformed}/>\n          </Grid>\n        </Grid> : null}    \n\n          \n\n\n        </Grid>\n      </Paper>\n    </ThemeProvider>\n  )\n};\n\n\n//<Paper styles={{color: 'blue'}}>xs=12</Paper>\n//{isNotEmpty(foodTransformed)? <Grid item xs={10} sm={8} md={5}><Chart data={foodTransformed} /></Grid> : null}     \n\nexport default App; ","/Users/dea/Code/Projects/nutrition-dashboard/client/src/Components/CaloriesChart.js",["62","63"],"import React from \"react\"\nimport { ResponsiveBar } from '@nivo/bar'\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\n\nconst data = [\n  {\n    \"country\": \"AD\",\n    \"hot dog\": 37,\n    \"burger\": 159,\n    \"sandwich\": 169,\n    \"kebab\": 15,\n    \"fries\": 148,\n  }]\n\n\nfunction MyResponsiveBar(props) {\n\n  const useStyles = makeStyles({\n    root: {\n      maxWidth: 1200,\n      minWidth: 200,\n      height: 150,\n      paddingBottom: 15,\n      marginBottom: 100,\n      marginRight: 10,\n      marginLeft: 10,\n      background: '#3f3b3b',\n      paddingTop: 0,\n      color: 'white',\n      opacity: 0.90\n    }\n  })\n  const styles = useStyles();\n\n\n\n    //array of the current foods \n    function getFoods(data){\n      return Object.keys(data).filter(el => el!==\"nutrient\"&&el!==\"max\")\n    }\n    const currentFoods = getFoods(props.data[0])\n  \n    const fills = [\"#f35588\", \"#71a95a\", \"#14b1ab\", \"#e8505b\", \"#f9d56e\"];\n    const colors = { \n      [currentFoods[0]]: \"#DB5375\", \n      [currentFoods[1]]: \"#EC9192\", \n      [currentFoods[2]]: \"#f8dc88\", \n      [currentFoods[3]]: \"#B5BD89\",\n      [currentFoods[4]]: \"#729EA1\",\n    }\n    const getColor = bar => colors[bar.id]\n\n  \n    const lineGraphSettings = {\n      theme: {\n      fontSize: '14px',\n      textColor: \"#eee\",\n      itemTextColor: \"#eee\",\n      tooltip: {\n        container: {\n        fontSize: \"14px\",\n        color: \"black\"\n        }}\n      },\n      };\n\n  return (\n    <Card className={styles.root} elevation={6}>\n    <CardContent><Typography variant=\"h5\">Calories</Typography></CardContent>\n    <ResponsiveBar\n        data={props.data.slice(0,1)}\n        keys={currentFoods}\n        indexBy=\"nutrient\"\n        margin={{ top: 0, right: 15, bottom: 50, left: 15 }}\n        padding={0.5}\n        layout=\"horizontal\"\n        //colors={{ scheme: 'nivo' }}\n        colors={getColor}\n        colorBy=\"id\"\n        defs={[\n            {\n                id: 'dots',\n                type: 'patternDots',\n                background: 'inherit',\n                color: '#38bcb2',\n                size: 4,\n                padding: 1,\n                stagger: true\n            },\n            {\n                id: 'lines',\n                type: 'patternLines',\n                background: 'inherit',\n                color: '#eed312',\n                rotation: -45,\n                lineWidth: 6,\n                spacing: 10\n            }\n        ]}\n        fill={[\n            {\n                match: {\n                    id: 'fries'\n                },\n                id: 'dots'\n            },\n            {\n                match: {\n                    id: 'sandwich'\n                },\n                id: 'lines'\n            }\n        ]}\n        borderColor={{ from: 'color', modifiers: [ [ 'darker', 2 ] ] }}\n        axisTop={null}\n        axisRight={null}\n        axisLeft={null}\n        axisBottom={null}\n\n        labelSkipWidth={12}\n        labelSkipHeight={12}\n        labelTextColor={{ from: 'color', modifiers: [ [ 'darker', 2 ] ] }}\n        legends={[\n            {\n                dataFrom: 'keys',\n                anchor: 'top-right',\n                direction: 'row',\n                justify: false,\n                translateX: 0,\n                translateY: 0,\n                itemsSpacing: 2,\n                itemWidth: 100,\n                itemHeight: 20,\n                itemTextColor: 'white',\n                itemDirection: 'left-to-right',\n                itemOpacity: 0.85,\n                symbolSize: 12,\n                symbolShape: 'circle',\n                effects: [\n                    {\n                        on: 'hover',\n                        style: {\n                            itemOpacity: 1\n                        }\n                    }\n                ]\n            }\n        ]}\n        animate={true}\n        motionStiffness={90}\n        motionDamping={15}\n        theme={lineGraphSettings.theme}\n    />\n    </Card>\n  )\n}\n\nexport default MyResponsiveBar;","/Users/dea/Code/Projects/nutrition-dashboard/client/src/Components/SearchBox.js",[],"/Users/dea/Code/Projects/nutrition-dashboard/client/src/Components/RadarChart.js",["64"],"import React from \"react\"\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\nimport { ResponsiveRadar } from '@nivo/radar'\n\n\n\nconst data = [\n  {\n    \"taste\": \"fruity\",\n    \"chardonay\": 33,\n    \"carmenere\": 118,\n    \"syrah\": 90\n  },\n  {\n    \"taste\": \"bitter\",\n    \"chardonay\": 48,\n    \"carmenere\": 116,\n    \"syrah\": 109\n  },\n  {\n    \"taste\": \"heavy\",\n    \"chardonay\": 97,\n    \"carmenere\": 44,\n    \"syrah\": 99\n  },\n  {\n    \"taste\": \"strong\",\n    \"chardonay\": 80,\n    \"carmenere\": 99,\n    \"syrah\": 81\n  },\n  {\n    \"taste\": \"sunny\",\n    \"chardonay\": 118,\n    \"carmenere\": 72,\n    \"syrah\": 73\n  }\n]\n\nfunction MyResponsiveRadar(props){\n\n\n  const useStyles = makeStyles({\n    root: {\n      maxWidth: 1000,\n      minWidth: 100,\n      height: 500,\n      //paddingBottom: 80\n      background: '#3f3b3b',\n      color: 'white',\n      opacity: 0.90,\n      marginBottom: 20,\n      marginRight: 10,\n      marginLeft: 10\n    }\n  })\n\n  const lineGraphSettings = {\n    theme: {\n      fontSize: '14px',\n      textColor: \"#eee\",\n      itemTextColor: \"#eee\",\n      tooltip: {\n        container: {\n        fontSize: \"14px\",\n        color: \"black\"\n        }\n      }\n    },\n    };\n\n  const styles = useStyles();\n\n    //array of the current foods \n  \n    function getFoods(data){\n      return Object.keys(data).filter(el => el!==\"nutrient\"&&el!==\"max\"&&el!==\"calories\")\n    }\n    const currentFoods = getFoods(props.data[0])\n\n  \n    const fills = [\"#DB5375\", \"#EC9192\", \"#f8dc88\", \"#B5BD89\", \"#729EA1\"];\n\n  return(\n    <Card className={styles.root} elevation={6}>\n    <CardContent><Typography variant=\"h5\">Nutritional distribution</Typography></CardContent>\n    <ResponsiveRadar\n        data={props.data.slice(1)}\n        keys={currentFoods}\n        indexBy=\"nutrient\"\n        maxValue=\"auto\"\n        margin={{ top: 65, right: 80, bottom: 135, left: 80 }}\n        padding={0.3}\n        curve=\"linearClosed\"\n        borderWidth={2}\n        borderColor={{ from: 'color' }}\n        gridLevels={5}\n        gridShape=\"circular\"\n        gridLabelOffset={36}\n        enableDots={false}\n        dotSize={10}\n        dotColor={{ theme: 'background' }}\n        dotBorderWidth={0}\n        dotBorderColor={{ from: 'color' }}\n        enableDotLabel={true}\n        dotLabel=\"value\"\n        dotLabelYOffset={-12}\n        //colors={{ scheme: 'nivo' }}\n        colors={fills}\n        //colorBy=\"id\"\n        fillOpacity={0.70}\n        blendMode=\"normal\"\n        animate={true}\n        motionStiffness={90}\n        motionDamping={15}\n        isInteractive={true}\n        theme={lineGraphSettings.theme}\n        legends={[\n            {\n                anchor: 'top-left',\n                direction: 'column',\n                translateX: -50,\n                translateY: -40,\n                itemWidth: 100,\n                itemHeight: 20,\n                itemTextColor: 'white',\n                symbolSize: 12,\n                symbolShape: 'circle',\n                itemOpacity: 0.85,\n                effects: [\n                    {\n                        on: 'hover',\n                        style: {\n                          itemOpacity: 1,\n                        }\n                    }\n                ]\n            }\n        ]}\n/>\n</Card>\n) \n}\n\n\nexport default MyResponsiveRadar; \n\n   ","/Users/dea/Code/Projects/nutrition-dashboard/client/src/Components/Header.js",["65","66"],"import React from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Switch from \"@material-ui/core/Switch\";\nimport FastfoodRoundedIcon from '@material-ui/icons/FastfoodRounded';\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    //flexGrow: 1,\n    background: '#3f3b3b',\n    color: 'white',\n    opacity: 0.90\n  },\n  icon: {\n    //marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\n\nfunction DarkModeSwitch(props) {\n  return(\n    <FormControlLabel\n      control={<Switch size=\"small\" \n      checked={props.darkMode} \n      onChange={() => props.setDarkMode(!props.darkMode)}/>}\n      label=\"Dark Mode\"\n    />\n  )\n};\n\nfunction Header(props) {\n  const classes = useStyles();\n\n  return (\n    <div >\n      <AppBar className={classes.root} position=\"static\" color=\"inherit\">\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.icon} color=\"inherit\">\n            <FastfoodRoundedIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            Nutrition Facts\n          </Typography>\n        {/*\n          <DarkModeSwitch \n            darkMode={props.darkMode}\n            setDarkMode={props.setDarkMode}\n          />\n        */}\n          \n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n};\n\nexport default Header;","/Users/dea/Code/Projects/nutrition-dashboard/client/src/Components/ImgMediaCard.js",[],"/Users/dea/Code/Projects/nutrition-dashboard/client/src/Components/BarChart.js",["67"],"import React from \"react\"\nimport { ResponsiveBar } from '@nivo/bar'\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\n\n\nfunction MyResponsiveBar(props) {\n\n  const useStyles = makeStyles({\n    root: {\n      maxWidth: 1000,\n      minWidth: 100,\n      height: 500,\n      background: '#3f3b3b',\n      color: 'white',\n      opacity: 0.90,\n      marginBottom: 20,\n      marginRight: 10,\n      marginLeft: 10\n    }\n  })\n  \n  const lineGraphSettings = {\n    theme: {\n        fontSize: '14px',\n        textColor: \"white\",\n        itemTextColor: \"black\",\n        tooltip: {\n                container: {\n                fontSize: \"14px\",\n                color: \"black\"\n                }\n            },\n        },\n    };\n\n  //array of the current foods \n  function getFoods(data){\n    return Object.keys(data).filter(el => el!==\"nutrient\"&&el!==\"max\"&&el!==\"calories\")\n  }\n  const currentFoods = getFoods(props.data[0])\n\n  const styles = useStyles();\n\n  const fills = [\"#f35588\", \"#71a95a\", \"#14b1ab\", \"#e8505b\", \"#f9d56e\"];\n  const colors = { \n    [currentFoods[0]]: \"#DB5375\", \n    [currentFoods[1]]: \"#EC9192\", \n    [currentFoods[2]]: \"#f8dc88\", \n    [currentFoods[3]]: \"#B5BD89\",\n    [currentFoods[4]]: \"#729EA1\",\n  }\n  const getColor = bar => colors[bar.id]\n\n\n  return (\n    <Card className={styles.root} elevation={6}>\n    <CardContent><Typography variant=\"h5\">Nutritional comparison</Typography></CardContent>\n    <ResponsiveBar\n        data={props.data.slice(1)}\n        keys={currentFoods}\n        indexBy=\"nutrient\"\n        margin={{ top: 10, right: 110, bottom: 140, left: 70 }}\n        padding={0.3}\n        //colors={{ scheme: 'nivo' }}\n        colors={getColor}\n        colorBy=\"id\"\n        defs={[\n            {\n                id: 'dots',\n                type: 'patternDots',\n                background: 'inherit',\n                color: '#38bcb2',\n                size: 4,\n                padding: 1,\n                stagger: true\n            },\n            {\n                id: 'lines',\n                type: 'patternLines',\n                background: 'inherit',\n                color: '#f8fab8',\n                rotation: -45,\n                lineWidth: 6,\n                spacing: 10\n            }\n        ]}\n        fill={[\n            {\n                match: {\n                    id: ''\n                },\n                id: 'dots'\n            },\n            {\n                match: {\n                    id: ''\n                },\n                id: 'lines'\n            }\n        ]}\n        borderColor={{ from: 'color', modifiers: [ [ 'darker', 2 ] ] }}\n        axisTop={null}\n        axisRight={null}\n        axisBottom={{\n            tickSize: 7,\n            tickPadding: 5,\n            tickRotation: -20,\n            //legend: 'Nutrients',\n            legendPosition: 'middle',\n            legendOffset: 45,\n            tickColor: \"#eee\",\n        }}\n        axisLeft={{\n            tickSize: 7,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: 'food',\n            legendPosition: 'middle',\n            legendOffset: -40\n        }}\n        labelSkipWidth={12}\n        labelSkipHeight={12}\n        labelTextColor={{ from: 'color', modifiers: [ [ 'darker', 2 ] ] }}\n        legends={[\n            {\n                dataFrom: 'keys',\n                anchor: 'bottom-right',\n                direction: 'column',\n                justify: false,\n                translateX: 120,\n                translateY: 0,\n                itemsSpacing: 2,\n                itemWidth: 100,\n                itemHeight: 20,\n                itemDirection: 'left-to-right',\n                itemOpacity: 0.85,\n                symbolSize: 12,\n                symbolShape: 'circle',\n                itemTextColor: 'white',\n                effects: [\n                    {\n                        on: 'hover',\n                        style: {\n                            itemOpacity: 1,\n                        }\n                    }\n                ]\n            }\n        ]}\n        enableGridY={true}\n        animate={true}\n        motionStiffness={90}\n        motionDamping={15}\n        theme={lineGraphSettings.theme}\n    />\n    </Card>\n  )\n}\n\nexport default MyResponsiveBar;","/Users/dea/Code/Projects/nutrition-dashboard/client/src/Components/Chart.js",["68"],"import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\nimport {\n  Radar, RadarChart, PolarGrid, Legend,\n  PolarAngleAxis, PolarRadiusAxis, ResponsiveContainer, \n} from 'recharts';\n\n\n// example of data format \n/*\nconst realData = [\n  {nutrient: \"calories\", apple: 52, banana: 50, kiwi: 61, max: 89},\n  {nutrient: \"fat\", apple: 0.17, banana: 0.33, kiwi: 50.52, max: 0.52},\n  {nutrient: \"carbs\", apple: 13.81, banana: 22.84, kiwi: 74.66, max: 22.84},\n  {nutrient: \"proteins\", apple: 0.26, banana: 81.09, kiwi: 1.14, max: 1.14},\n  {nutrient: \"fiber\", apple: 2.4, banana: 82.6, kiwi: 3, max: 3}\n]\n*/\n\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 700,\n    minWidth: 200,\n    height: 500,\n    background: '#3f3b3b',\n    color: 'white',\n    opacity: 0.90,\n  }\n})\n\n\n\nfunction MyRadarChart(props) {\n    const styles = useStyles();\n    const fills = [\"#DB5375\", \"#EC9192\", \"#f8dc88\", \"#B5BD89\", \"#729EA1\"]\n\n    //array of the current foods \n    function getFoods(data){\n      return Object.keys(data).filter(el => el!==\"nutrient\"&&el!==\"max\"&&el!==\"calories\")\n    }\n    const currentFoods = getFoods(props.data[0])\n\n    //opacity \n\n    function handleOpacities(opacity){\n      let opacities = [];\n      currentFoods.forEach(food => opacities.push([food, opacity]))\n      opacities = Object.fromEntries(opacities)\n      return opacities\n    }\n    const startOpacities = handleOpacities(0.8);\n    const baseOpacities = handleOpacities(0.4);\n\n    const [opacities, setOpacities] = useState(startOpacities)\n\n\n    function handleLegendClick(e){\n      const { dataKey } = e\n      setOpacities({...baseOpacities, [dataKey]: 0.9});\n    }\n\n    useEffect(()=>{\n      console.log(\"The data changed\")\n      setOpacities(baseOpacities)\n      console.log(props.data)\n    }, [props.data])\n\n\n    return (    \n      <Card className={styles.root} elevation={6}>\n        <CardContent><Typography variant=\"h5\">Nutritional distribution</Typography></CardContent>\n        <ResponsiveContainer width=\"99%\" height=\"74%\">\n            <RadarChart outerRadius={\"70%\"}  data={props.data.slice(1)} >\n              <PolarGrid />\n              <PolarAngleAxis dataKey=\"nutrient\" />\n              <PolarRadiusAxis angle={30} domain={[0, 20]} />\n\n              {currentFoods.map((food, id) => (\n                <Radar key={id} name={food} dataKey={food} fill={fills[id]} fillOpacity={opacities[food]} />))}\nr\n            {/* \n              <Radar name=\"Apple\" dataKey=\"apple\" fill=\"#8884d8\" fillOpacity={0.6} />\n              <Radar name=\"Banana\" dataKey=\"banana\" fill=\"#82ca9d\" fillOpacity={0.6} />\n              <Radar name=\"Kiwi\" dataKey=\"kiwi\" fill=\"#edb2c2\" fillOpacity={0.6} />\n            */} \n              <Legend onClick={handleLegendClick}/>\n            </RadarChart> \n        </ResponsiveContainer>   \n        <CardContent><Typography variant=\"subtitle2\">*click on food in legend</Typography></CardContent>     \n      </Card>\n      \n    );\n  }\n\n\nexport default MyRadarChart;\n\n","/Users/dea/Code/Projects/nutrition-dashboard/client/src/Functionality/data.js",["69","70"],"/*\nconst dataRaw = [\n  { id:0, name: 'Frozen yoghurt', calories: 159, fat: 5, carbs: 85, protein:34, fiber: 10 },\n  { id:1, name: 'Ice cream sandwich', calories: 237, fat: 33, carbs: 23, protein: 100, fiber: 20 },\n  { id:2, name: 'Eclair', calories: 262, fat: 4, carbs: 45, protein:6, fiber: 30 }\n*/\n\nfunction dataTransform(dataRaw){\n  if (dataRaw.length !==0) {\n    const dataAttr = [\"food\", \"PROCNT\", \"FIBTG\",\"FAT\", \"ENERC_KCAL\", \"CHOCDF\"]\n    const food = dataRaw.map(obj => obj.food)\n    const proteins = dataRaw.map(obj => obj.PROCNT)\n    const fiber = dataRaw.map(obj => obj.FIBTG)\n    const fat = dataRaw.map(obj => obj.FAT)\n    const calories = dataRaw.map(obj => obj.ENERC_KCAL)\n    const carbs = dataRaw.map(obj => obj.CHOCDF)\n    const dataFormatted = {food, proteins, fiber, fat, calories, carbs}\n    //const dataFormatted = {food, proteins, fiber, fat, carbs}\n    \n    const nutrients = [\"calories\", \"fat\", \"carbs\", \"proteins\", \"fiber\"]\n    //const nutrients = [\"fat\", \"carbs\", \"proteins\", \"fiber\"]\n    let dataTransformed = []\n    for (const nurt of nutrients) {\n      var result = {};\n      dataFormatted.food.forEach((id, i) => result[id] = dataFormatted[nurt][i]);\n      dataTransformed.push({nutrient: nurt, ...result, max: Math.max(...dataFormatted[nurt])})\n    };\n    return dataTransformed\n  } else {\n    return dataRaw\n  }\n};\n\nexport default dataTransform; \n","/Users/dea/Code/Projects/nutrition-dashboard/client/src/Functionality/api.js",[],"/Users/dea/Code/Projects/nutrition-dashboard/client/src/Components/Table.js",["71"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Checkbox from '@material-ui/core/Checkbox';\n\n/* example expected data format\nconst dataRaw = [\n  { id:0, name: 'Frozen yoghurt', calories: 159, fat: 5, carbs: 85, protein:34, fiber: 10 },\n  { id:1, name: 'Ice cream sandwich', calories: 237, fat: 33, carbs: 23, protein: 100, fiber: 20 },\n  { id:2, name: 'Eclair', calories: 262, fat: 4, carbs: 45, protein:6, fiber: 30 }\n]\n*/\n\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 200,\n    borderBottom: \"none\",\n  },\n});\n\n\n\nfunction DenseTable(props) {\n  const classes = useStyles();\n\n  return (\n    <TableContainer>\n\n      <Table className={classes.table} size=\"small\" aria-label=\"a dense table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>100g serving</TableCell>\n            <TableCell align=\"right\">Calories</TableCell>\n            <TableCell align=\"right\">Fat&nbsp;(g)</TableCell>\n            <TableCell align=\"right\">Carbs&nbsp;(g)</TableCell>\n            <TableCell align=\"right\">Protein&nbsp;(g)</TableCell>\n            <TableCell align=\"right\">Fiber&nbsp;(g)</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {props.data.map((row, id) => (\n            <TableRow key={row.food}>\n              <TableCell style={{ minWidth: \"110px\", minWidth: \"200px\", padding: \"5px\" }} component=\"th\" scope=\"row\" padding=\"checkbox\">\n                <Checkbox \n                  style={{padding: \"10px\"}}\n                  inputProps={{ 'aria-label': 'primary checkbox' }}\n                  name={row.food}\n                  onChange={(e) => props.handleChecked(e, id)}\n                />                \n                {row.food}\n              </TableCell>\n              <TableCell align=\"right\">{row.ENERC_KCAL}</TableCell>\n              <TableCell align=\"right\">{row.FAT}</TableCell>\n              <TableCell align=\"right\">{row.CHOCDF}</TableCell>\n              <TableCell align=\"right\">{row.PROCNT}</TableCell>\n              <TableCell align=\"right\">{row.FIBTG}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n    \n  );\n};\n\n\nexport default DenseTable;",{"ruleId":"72","severity":1,"message":"73","line":2,"column":54,"nodeType":"74","messageId":"75","endLine":2,"endColumn":57},{"ruleId":"72","severity":1,"message":"76","line":3,"column":22,"nodeType":"74","messageId":"75","endLine":3,"endColumn":30},{"ruleId":"72","severity":1,"message":"77","line":6,"column":8,"nodeType":"74","messageId":"75","endLine":6,"endColumn":13},{"ruleId":"72","severity":1,"message":"78","line":11,"column":8,"nodeType":"74","messageId":"75","endLine":11,"endColumn":14},{"ruleId":"72","severity":1,"message":"79","line":6,"column":7,"nodeType":"74","messageId":"75","endLine":6,"endColumn":11},{"ruleId":"72","severity":1,"message":"80","line":44,"column":11,"nodeType":"74","messageId":"75","endLine":44,"endColumn":16},{"ruleId":"72","severity":1,"message":"79","line":8,"column":7,"nodeType":"74","messageId":"75","endLine":8,"endColumn":11},{"ruleId":"72","severity":1,"message":"81","line":6,"column":8,"nodeType":"74","messageId":"75","endLine":6,"endColumn":14},{"ruleId":"72","severity":1,"message":"82","line":29,"column":10,"nodeType":"74","messageId":"75","endLine":29,"endColumn":24},{"ruleId":"72","severity":1,"message":"80","line":45,"column":9,"nodeType":"74","messageId":"75","endLine":45,"endColumn":14},{"ruleId":"83","severity":1,"message":"84","line":68,"column":8,"nodeType":"85","endLine":68,"endColumn":20,"suggestions":"86"},{"ruleId":"72","severity":1,"message":"87","line":10,"column":11,"nodeType":"74","messageId":"75","endLine":10,"endColumn":19},{"ruleId":"88","severity":1,"message":"89","line":25,"column":34,"nodeType":"90","messageId":"91","endLine":25,"endColumn":80},{"ruleId":"92","severity":1,"message":"93","line":49,"column":54,"nodeType":"94","messageId":"95","endLine":49,"endColumn":62},"no-unused-vars","'Box' is defined but never used.","Identifier","unusedVar","'useTheme' is defined but never used.","'Chart' is defined but never used.","'styles' is defined but never used.","'data' is assigned a value but never used.","'fills' is assigned a value but never used.","'Button' is defined but never used.","'DarkModeSwitch' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'baseOpacities'. Either include it or remove the dependency array.","ArrayExpression",["96"],"'dataAttr' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'result'.","ArrowFunctionExpression","unsafeRefs","no-dupe-keys","Duplicate key 'minWidth'.","ObjectExpression","unexpected",{"desc":"97","fix":"98"},"Update the dependencies array to be: [baseOpacities, props.data]",{"range":"99","text":"100"},[1879,1891],"[baseOpacities, props.data]"]