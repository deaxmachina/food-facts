{"version":3,"sources":["Components/SearchBox.js","Components/Table.js","Components/ImgMediaCard.js","Components/Chart.js","Components/Header.js","Components/BarChart.js","Components/CaloriesChart.js","Components/RadarChart.js","Functionality/api.js","Functionality/data.js","App.js","index.js"],"names":["InputButton","props","style","Grid","item","container","direction","Input","color","onChange","handleUserInput","value","userInput","placeholder","Button","onClick","keepFoods","useStyles","makeStyles","table","minWidth","borderBottom","DenseTable","classes","TableContainer","Table","className","size","aria-label","TableHead","TableRow","TableCell","align","TableBody","data","map","row","id","key","food","component","scope","padding","Checkbox","inputProps","name","e","handleChecked","ENERC_KCAL","FAT","CHOCDF","PROCNT","FIBTG","root","maxWidth","background","opacity","marginBottom","marginRight","marginLeft","content","maxHeight","overflow","media","backgroundImage","ImgMediaCard","styles","Card","elevation","CardActionArea","CardMedia","alt","height","image","title","CardContent","Typography","gutterBottom","variant","CardActions","handleDataTransform","disableElevation","handleClearTable","MyRadarChart","theme","icon","flexGrow","Header","AppBar","position","Toolbar","IconButton","edge","MyResponsiveBar","currentFoods","Object","keys","filter","el","getFoods","colors","slice","indexBy","margin","top","right","bottom","left","bar","colorBy","defs","type","stagger","rotation","lineWidth","spacing","fill","match","borderColor","from","modifiers","axisTop","axisRight","axisBottom","tickSize","tickPadding","tickRotation","legendPosition","legendOffset","tickColor","axisLeft","legend","labelSkipWidth","labelSkipHeight","labelTextColor","legends","dataFrom","anchor","justify","translateX","translateY","itemsSpacing","itemWidth","itemHeight","itemDirection","itemOpacity","symbolSize","symbolShape","itemTextColor","effects","on","enableGridY","animate","motionStiffness","motionDamping","fontSize","textColor","tooltip","paddingBottom","paddingTop","layout","MyResponsiveRadar","maxValue","curve","borderWidth","gridLevels","gridShape","gridLabelOffset","enableDots","dotSize","dotColor","dotBorderWidth","dotBorderColor","enableDotLabel","dotLabel","dotLabelYOffset","fillOpacity","blendMode","isInteractive","apiKey","foodName","a","apiUrl","axios","get","rawData","console","log","foodLabel","text","parsed","nutrients","getData","dataTransform","dataRaw","length","result","dataFormatted","obj","proteins","fiber","fat","calories","carbs","dataTransformed","nurt","forEach","i","push","nutrient","max","Math","isNotEmpty","hasOwnProperty","App","useState","setUserInput","foodNames","setFoodNames","foodData","setFoodData","selectedFoodData","setSelectedFoodData","foodTransformed","setFoodTransformed","includes","prevItem","darkMode","setDarkMode","createMuiTheme","palette","ThemeProvider","Paper","square","alignItems","xs","sm","md","SearchBox","event","input","target","foodId","checked","currentFood","currentFoodData","find","x","prevItems","keepSelectedFoods","index","foodDataTransformed","dataTrasform","lg","RadarChart","CaloriesChart","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d3c60219.chunk.js","sourcesContent":["import React from \"react\";\nimport { Button, Input, Grid } from \"@material-ui/core\";\n\n\n\nfunction InputButton(props){\n  return (\n    <div style={{'padding' : '50px'}}>\n      <Grid item container direction=\"column\" >\n        <Input \n          color=\"secondary\"\n          onChange={props.handleUserInput}\n          value={props.userInput}\n          placeholder=\"food search (max 5)\"\n        />\n      </Grid>\n      <Grid item container direction=\"column\" >\n        <Button \n          color=\"secondary\"\n          onClick={props.keepFoods}\n          >\n          Get nutrients \n        </Button>\n      </Grid>\n    </div>\n  )\n}\n\nexport default InputButton;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Checkbox from '@material-ui/core/Checkbox';\n\n/* example expected data format\nconst dataRaw = [\n  { id:0, name: 'Frozen yoghurt', calories: 159, fat: 5, carbs: 85, protein:34, fiber: 10 },\n  { id:1, name: 'Ice cream sandwich', calories: 237, fat: 33, carbs: 23, protein: 100, fiber: 20 },\n  { id:2, name: 'Eclair', calories: 262, fat: 4, carbs: 45, protein:6, fiber: 30 }\n]\n*/\n\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 200,\n    borderBottom: \"none\",\n  },\n});\n\n\n\nfunction DenseTable(props) {\n  const classes = useStyles();\n\n  return (\n    <TableContainer>\n\n      <Table className={classes.table} size=\"small\" aria-label=\"a dense table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>100g serving</TableCell>\n            <TableCell align=\"right\">Calories</TableCell>\n            <TableCell align=\"right\">Fat&nbsp;(g)</TableCell>\n            <TableCell align=\"right\">Carbs&nbsp;(g)</TableCell>\n            <TableCell align=\"right\">Protein&nbsp;(g)</TableCell>\n            <TableCell align=\"right\">Fiber&nbsp;(g)</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {props.data.map((row, id) => (\n            <TableRow key={row.food}>\n              <TableCell style={{ minWidth: \"110px\", minWidth: \"200px\", padding: \"5px\" }} component=\"th\" scope=\"row\" padding=\"checkbox\">\n                <Checkbox \n                  style={{padding: \"10px\"}}\n                  inputProps={{ 'aria-label': 'primary checkbox' }}\n                  name={row.food}\n                  onChange={(e) => props.handleChecked(e, id)}\n                />                \n                {row.food}\n              </TableCell>\n              <TableCell align=\"right\">{row.ENERC_KCAL}</TableCell>\n              <TableCell align=\"right\">{row.FAT}</TableCell>\n              <TableCell align=\"right\">{row.CHOCDF}</TableCell>\n              <TableCell align=\"right\">{row.PROCNT}</TableCell>\n              <TableCell align=\"right\">{row.FIBTG}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n    \n  );\n};\n\n\nexport default DenseTable;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Table from \"./Table\";\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 700,\n    minWidth: 100,\n    background: '#3f3b3b',\n    color: 'white',\n    opacity: 0.90,\n    marginBottom: 60,\n    marginRight: 10,\n    marginLeft: 10,\n  },\n  content: {\n    maxHeight: 350,\n    overflow: 'auto'\n  },\n  media: {\n      backgroundImage: 'linear-gradient(147deg, #fe8a39 0%, #fd3838 74%)',\n      opacity: 0.8,\n    },\n\n});\n\n\nfunction ImgMediaCard(props) {\n  const styles = useStyles();\n\n  return (\n    <Card className={styles.root} elevation={6}>\n      <CardActionArea>\n        <CardMedia className={styles.media}\n          component=\"img\"\n          alt=\"food image\"\n          height=\"200\"\n          image={props.image}\n          title=\"Foods\"\n        />\n        <CardContent className={styles.content} >\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            Foods\n          </Typography>\n          <Table \n            data={props.data}\n            handleChecked={props.handleChecked}\n          />\n        </CardContent>\n      </CardActionArea>\n      <CardActions>\n        <Button onClick={props.handleDataTransform} disableElevation variant=\"contained\" size=\"small\" color=\"secondary\">\n          Visualise\n        </Button>\n        <Button onClick={props.handleClearTable} disableElevation variant=\"outlined\" size=\"small\" color=\"default\">\n          Clear table\n        </Button>\n      </CardActions>\n    </Card>\n  );\n}\n\n\nexport default ImgMediaCard;","import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\nimport {\n  Radar, RadarChart, PolarGrid, Legend,\n  PolarAngleAxis, PolarRadiusAxis, ResponsiveContainer, \n} from 'recharts';\n\n\n// example of data format \n/*\nconst realData = [\n  {nutrient: \"calories\", apple: 52, banana: 50, kiwi: 61, max: 89},\n  {nutrient: \"fat\", apple: 0.17, banana: 0.33, kiwi: 50.52, max: 0.52},\n  {nutrient: \"carbs\", apple: 13.81, banana: 22.84, kiwi: 74.66, max: 22.84},\n  {nutrient: \"proteins\", apple: 0.26, banana: 81.09, kiwi: 1.14, max: 1.14},\n  {nutrient: \"fiber\", apple: 2.4, banana: 82.6, kiwi: 3, max: 3}\n]\n*/\n\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 700,\n    minWidth: 200,\n    height: 500,\n    background: '#3f3b3b',\n    color: 'white',\n    opacity: 0.90,\n  }\n})\n\n\n\nfunction MyRadarChart(props) {\n    const styles = useStyles();\n    const fills = [\"#DB5375\", \"#EC9192\", \"#f8dc88\", \"#B5BD89\", \"#729EA1\"]\n\n    //array of the current foods \n    function getFoods(data){\n      return Object.keys(data).filter(el => el!==\"nutrient\"&&el!==\"max\"&&el!==\"calories\")\n    }\n    const currentFoods = getFoods(props.data[0])\n\n    //opacity \n\n    function handleOpacities(opacity){\n      let opacities = [];\n      currentFoods.forEach(food => opacities.push([food, opacity]))\n      opacities = Object.fromEntries(opacities)\n      return opacities\n    }\n    const startOpacities = handleOpacities(0.8);\n    const baseOpacities = handleOpacities(0.4);\n\n    const [opacities, setOpacities] = useState(startOpacities)\n\n\n    function handleLegendClick(e){\n      const { dataKey } = e\n      setOpacities({...baseOpacities, [dataKey]: 0.9});\n    }\n\n    useEffect(()=>{\n      console.log(\"The data changed\")\n      setOpacities(baseOpacities)\n      console.log(props.data)\n    }, [props.data])\n\n\n    return (    \n      <Card className={styles.root} elevation={6}>\n        <CardContent><Typography variant=\"h5\">Nutritional distribution</Typography></CardContent>\n        <ResponsiveContainer width=\"99%\" height=\"74%\">\n            <RadarChart outerRadius={\"70%\"}  data={props.data.slice(1)} >\n              <PolarGrid />\n              <PolarAngleAxis dataKey=\"nutrient\" />\n              <PolarRadiusAxis angle={30} domain={[0, 20]} />\n\n              {currentFoods.map((food, id) => (\n                <Radar key={id} name={food} dataKey={food} fill={fills[id]} fillOpacity={opacities[food]} />))}\nr\n            {/* \n              <Radar name=\"Apple\" dataKey=\"apple\" fill=\"#8884d8\" fillOpacity={0.6} />\n              <Radar name=\"Banana\" dataKey=\"banana\" fill=\"#82ca9d\" fillOpacity={0.6} />\n              <Radar name=\"Kiwi\" dataKey=\"kiwi\" fill=\"#edb2c2\" fillOpacity={0.6} />\n            */} \n              <Legend onClick={handleLegendClick}/>\n            </RadarChart> \n        </ResponsiveContainer>   \n        <CardContent><Typography variant=\"subtitle2\">*click on food in legend</Typography></CardContent>     \n      </Card>\n      \n    );\n  }\n\n\nexport default MyRadarChart;\n\n","import React from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Switch from \"@material-ui/core/Switch\";\nimport FastfoodRoundedIcon from '@material-ui/icons/FastfoodRounded';\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    //flexGrow: 1,\n    background: '#3f3b3b',\n    color: 'white',\n    opacity: 0.90\n  },\n  icon: {\n    //marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\n\nfunction DarkModeSwitch(props) {\n  return(\n    <FormControlLabel\n      control={<Switch size=\"small\" \n      checked={props.darkMode} \n      onChange={() => props.setDarkMode(!props.darkMode)}/>}\n      label=\"Dark Mode\"\n    />\n  )\n};\n\nfunction Header(props) {\n  const classes = useStyles();\n\n  return (\n    <div >\n      <AppBar className={classes.root} position=\"static\" color=\"inherit\">\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.icon} color=\"inherit\">\n            <FastfoodRoundedIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            Nutrition Facts\n          </Typography>\n        {/*\n          <DarkModeSwitch \n            darkMode={props.darkMode}\n            setDarkMode={props.setDarkMode}\n          />\n        */}\n          \n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n};\n\nexport default Header;","import React from \"react\"\nimport { ResponsiveBar } from '@nivo/bar'\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\n\n\nfunction MyResponsiveBar(props) {\n\n  const useStyles = makeStyles({\n    root: {\n      maxWidth: 1000,\n      minWidth: 100,\n      height: 500,\n      background: '#3f3b3b',\n      color: 'white',\n      opacity: 0.90,\n      marginBottom: 20,\n      marginRight: 10,\n      marginLeft: 10\n    }\n  })\n  \n  const lineGraphSettings = {\n    theme: {\n        fontSize: '14px',\n        textColor: \"white\",\n        itemTextColor: \"black\",\n        tooltip: {\n                container: {\n                fontSize: \"14px\",\n                color: \"black\"\n                }\n            },\n        },\n    };\n\n  //array of the current foods \n  function getFoods(data){\n    return Object.keys(data).filter(el => el!==\"nutrient\"&&el!==\"max\"&&el!==\"calories\")\n  }\n  const currentFoods = getFoods(props.data[0])\n\n  const styles = useStyles();\n\n  const fills = [\"#f35588\", \"#71a95a\", \"#14b1ab\", \"#e8505b\", \"#f9d56e\"];\n  const colors = { \n    [currentFoods[0]]: \"#DB5375\", \n    [currentFoods[1]]: \"#EC9192\", \n    [currentFoods[2]]: \"#f8dc88\", \n    [currentFoods[3]]: \"#B5BD89\",\n    [currentFoods[4]]: \"#729EA1\",\n  }\n  const getColor = bar => colors[bar.id]\n\n\n  return (\n    <Card className={styles.root} elevation={6}>\n    <CardContent><Typography variant=\"h5\">Nutritional comparison</Typography></CardContent>\n    <ResponsiveBar\n        data={props.data.slice(1)}\n        keys={currentFoods}\n        indexBy=\"nutrient\"\n        margin={{ top: 10, right: 110, bottom: 140, left: 70 }}\n        padding={0.3}\n        //colors={{ scheme: 'nivo' }}\n        colors={getColor}\n        colorBy=\"id\"\n        defs={[\n            {\n                id: 'dots',\n                type: 'patternDots',\n                background: 'inherit',\n                color: '#38bcb2',\n                size: 4,\n                padding: 1,\n                stagger: true\n            },\n            {\n                id: 'lines',\n                type: 'patternLines',\n                background: 'inherit',\n                color: '#f8fab8',\n                rotation: -45,\n                lineWidth: 6,\n                spacing: 10\n            }\n        ]}\n        fill={[\n            {\n                match: {\n                    id: ''\n                },\n                id: 'dots'\n            },\n            {\n                match: {\n                    id: ''\n                },\n                id: 'lines'\n            }\n        ]}\n        borderColor={{ from: 'color', modifiers: [ [ 'darker', 2 ] ] }}\n        axisTop={null}\n        axisRight={null}\n        axisBottom={{\n            tickSize: 7,\n            tickPadding: 5,\n            tickRotation: -20,\n            //legend: 'Nutrients',\n            legendPosition: 'middle',\n            legendOffset: 45,\n            tickColor: \"#eee\",\n        }}\n        axisLeft={{\n            tickSize: 7,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: 'food',\n            legendPosition: 'middle',\n            legendOffset: -40\n        }}\n        labelSkipWidth={12}\n        labelSkipHeight={12}\n        labelTextColor={{ from: 'color', modifiers: [ [ 'darker', 2 ] ] }}\n        legends={[\n            {\n                dataFrom: 'keys',\n                anchor: 'bottom-right',\n                direction: 'column',\n                justify: false,\n                translateX: 120,\n                translateY: 0,\n                itemsSpacing: 2,\n                itemWidth: 100,\n                itemHeight: 20,\n                itemDirection: 'left-to-right',\n                itemOpacity: 0.85,\n                symbolSize: 12,\n                symbolShape: 'circle',\n                itemTextColor: 'white',\n                effects: [\n                    {\n                        on: 'hover',\n                        style: {\n                            itemOpacity: 1,\n                        }\n                    }\n                ]\n            }\n        ]}\n        enableGridY={true}\n        animate={true}\n        motionStiffness={90}\n        motionDamping={15}\n        theme={lineGraphSettings.theme}\n    />\n    </Card>\n  )\n}\n\nexport default MyResponsiveBar;","import React from \"react\"\nimport { ResponsiveBar } from '@nivo/bar'\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\n\nconst data = [\n  {\n    \"country\": \"AD\",\n    \"hot dog\": 37,\n    \"burger\": 159,\n    \"sandwich\": 169,\n    \"kebab\": 15,\n    \"fries\": 148,\n  }]\n\n\nfunction MyResponsiveBar(props) {\n\n  const useStyles = makeStyles({\n    root: {\n      maxWidth: 1200,\n      minWidth: 200,\n      height: 150,\n      paddingBottom: 15,\n      marginBottom: 100,\n      marginRight: 10,\n      marginLeft: 10,\n      background: '#3f3b3b',\n      paddingTop: 0,\n      color: 'white',\n      opacity: 0.90\n    }\n  })\n  const styles = useStyles();\n\n\n\n    //array of the current foods \n    function getFoods(data){\n      return Object.keys(data).filter(el => el!==\"nutrient\"&&el!==\"max\")\n    }\n    const currentFoods = getFoods(props.data[0])\n  \n    const fills = [\"#f35588\", \"#71a95a\", \"#14b1ab\", \"#e8505b\", \"#f9d56e\"];\n    const colors = { \n      [currentFoods[0]]: \"#DB5375\", \n      [currentFoods[1]]: \"#EC9192\", \n      [currentFoods[2]]: \"#f8dc88\", \n      [currentFoods[3]]: \"#B5BD89\",\n      [currentFoods[4]]: \"#729EA1\",\n    }\n    const getColor = bar => colors[bar.id]\n\n  \n    const lineGraphSettings = {\n      theme: {\n      fontSize: '14px',\n      textColor: \"#eee\",\n      itemTextColor: \"#eee\",\n      tooltip: {\n        container: {\n        fontSize: \"14px\",\n        color: \"black\"\n        }}\n      },\n      };\n\n  return (\n    <Card className={styles.root} elevation={6}>\n    <CardContent><Typography variant=\"h5\">Calories</Typography></CardContent>\n    <ResponsiveBar\n        data={props.data.slice(0,1)}\n        keys={currentFoods}\n        indexBy=\"nutrient\"\n        margin={{ top: 0, right: 15, bottom: 50, left: 15 }}\n        padding={0.5}\n        layout=\"horizontal\"\n        //colors={{ scheme: 'nivo' }}\n        colors={getColor}\n        colorBy=\"id\"\n        defs={[\n            {\n                id: 'dots',\n                type: 'patternDots',\n                background: 'inherit',\n                color: '#38bcb2',\n                size: 4,\n                padding: 1,\n                stagger: true\n            },\n            {\n                id: 'lines',\n                type: 'patternLines',\n                background: 'inherit',\n                color: '#eed312',\n                rotation: -45,\n                lineWidth: 6,\n                spacing: 10\n            }\n        ]}\n        fill={[\n            {\n                match: {\n                    id: 'fries'\n                },\n                id: 'dots'\n            },\n            {\n                match: {\n                    id: 'sandwich'\n                },\n                id: 'lines'\n            }\n        ]}\n        borderColor={{ from: 'color', modifiers: [ [ 'darker', 2 ] ] }}\n        axisTop={null}\n        axisRight={null}\n        axisLeft={null}\n        axisBottom={null}\n\n        labelSkipWidth={12}\n        labelSkipHeight={12}\n        labelTextColor={{ from: 'color', modifiers: [ [ 'darker', 2 ] ] }}\n        legends={[\n            {\n                dataFrom: 'keys',\n                anchor: 'top-right',\n                direction: 'row',\n                justify: false,\n                translateX: 0,\n                translateY: 0,\n                itemsSpacing: 2,\n                itemWidth: 100,\n                itemHeight: 20,\n                itemTextColor: 'white',\n                itemDirection: 'left-to-right',\n                itemOpacity: 0.85,\n                symbolSize: 12,\n                symbolShape: 'circle',\n                effects: [\n                    {\n                        on: 'hover',\n                        style: {\n                            itemOpacity: 1\n                        }\n                    }\n                ]\n            }\n        ]}\n        animate={true}\n        motionStiffness={90}\n        motionDamping={15}\n        theme={lineGraphSettings.theme}\n    />\n    </Card>\n  )\n}\n\nexport default MyResponsiveBar;","import React from \"react\"\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\nimport { ResponsiveRadar } from '@nivo/radar'\n\n\n\nconst data = [\n  {\n    \"taste\": \"fruity\",\n    \"chardonay\": 33,\n    \"carmenere\": 118,\n    \"syrah\": 90\n  },\n  {\n    \"taste\": \"bitter\",\n    \"chardonay\": 48,\n    \"carmenere\": 116,\n    \"syrah\": 109\n  },\n  {\n    \"taste\": \"heavy\",\n    \"chardonay\": 97,\n    \"carmenere\": 44,\n    \"syrah\": 99\n  },\n  {\n    \"taste\": \"strong\",\n    \"chardonay\": 80,\n    \"carmenere\": 99,\n    \"syrah\": 81\n  },\n  {\n    \"taste\": \"sunny\",\n    \"chardonay\": 118,\n    \"carmenere\": 72,\n    \"syrah\": 73\n  }\n]\n\nfunction MyResponsiveRadar(props){\n\n\n  const useStyles = makeStyles({\n    root: {\n      maxWidth: 1000,\n      minWidth: 100,\n      height: 500,\n      //paddingBottom: 80\n      background: '#3f3b3b',\n      color: 'white',\n      opacity: 0.90,\n      marginBottom: 20,\n      marginRight: 10,\n      marginLeft: 10\n    }\n  })\n\n  const lineGraphSettings = {\n    theme: {\n      fontSize: '14px',\n      textColor: \"#eee\",\n      itemTextColor: \"#eee\",\n      tooltip: {\n        container: {\n        fontSize: \"14px\",\n        color: \"black\"\n        }\n      }\n    },\n    };\n\n  const styles = useStyles();\n\n    //array of the current foods \n  \n    function getFoods(data){\n      return Object.keys(data).filter(el => el!==\"nutrient\"&&el!==\"max\"&&el!==\"calories\")\n    }\n    const currentFoods = getFoods(props.data[0])\n\n  \n    const fills = [\"#DB5375\", \"#EC9192\", \"#f8dc88\", \"#B5BD89\", \"#729EA1\"];\n\n  return(\n    <Card className={styles.root} elevation={6}>\n    <CardContent><Typography variant=\"h5\">Nutritional distribution</Typography></CardContent>\n    <ResponsiveRadar\n        data={props.data.slice(1)}\n        keys={currentFoods}\n        indexBy=\"nutrient\"\n        maxValue=\"auto\"\n        margin={{ top: 65, right: 80, bottom: 135, left: 80 }}\n        padding={0.3}\n        curve=\"linearClosed\"\n        borderWidth={2}\n        borderColor={{ from: 'color' }}\n        gridLevels={5}\n        gridShape=\"circular\"\n        gridLabelOffset={36}\n        enableDots={false}\n        dotSize={10}\n        dotColor={{ theme: 'background' }}\n        dotBorderWidth={0}\n        dotBorderColor={{ from: 'color' }}\n        enableDotLabel={true}\n        dotLabel=\"value\"\n        dotLabelYOffset={-12}\n        //colors={{ scheme: 'nivo' }}\n        colors={fills}\n        //colorBy=\"id\"\n        fillOpacity={0.70}\n        blendMode=\"normal\"\n        animate={true}\n        motionStiffness={90}\n        motionDamping={15}\n        isInteractive={true}\n        theme={lineGraphSettings.theme}\n        legends={[\n            {\n                anchor: 'top-left',\n                direction: 'column',\n                translateX: -50,\n                translateY: -40,\n                itemWidth: 100,\n                itemHeight: 20,\n                itemTextColor: 'white',\n                symbolSize: 12,\n                symbolShape: 'circle',\n                itemOpacity: 0.85,\n                effects: [\n                    {\n                        on: 'hover',\n                        style: {\n                          itemOpacity: 1,\n                        }\n                    }\n                ]\n            }\n        ]}\n/>\n</Card>\n) \n}\n\n\nexport default MyResponsiveRadar; \n\n   ","import axios from \"axios\";\n\n//api creds - to move! \nconst appId = \"2b9c56f8\"\nconst apiKey = \"4b2d3c98a882d580d432b28e9fd6c748\"\n\n//fetch the raw api data \nasync function getData(foodName){\n  try {\n    const apiUrl = `https://api.edamam.com/api/food-database/v2/parser?ingr=${foodName}&app_id=${appId}&app_key=${apiKey}`;\n    const {data: rawData} = await axios.get(apiUrl);\n    console.log(rawData)\n    const {text: foodLabel, parsed} = rawData\n    const [{food: {nutrients}}] = parsed \n    return {food: foodLabel, ...nutrients};\n  } catch (error) {\n    console.log(error);    \n    return {}; \n  }\n};\n\nexport default getData; ","/*\nconst dataRaw = [\n  { id:0, name: 'Frozen yoghurt', calories: 159, fat: 5, carbs: 85, protein:34, fiber: 10 },\n  { id:1, name: 'Ice cream sandwich', calories: 237, fat: 33, carbs: 23, protein: 100, fiber: 20 },\n  { id:2, name: 'Eclair', calories: 262, fat: 4, carbs: 45, protein:6, fiber: 30 }\n*/\n\nfunction dataTransform(dataRaw){\n  if (dataRaw.length !==0) {\n    const dataAttr = [\"food\", \"PROCNT\", \"FIBTG\",\"FAT\", \"ENERC_KCAL\", \"CHOCDF\"]\n    const food = dataRaw.map(obj => obj.food)\n    const proteins = dataRaw.map(obj => obj.PROCNT)\n    const fiber = dataRaw.map(obj => obj.FIBTG)\n    const fat = dataRaw.map(obj => obj.FAT)\n    const calories = dataRaw.map(obj => obj.ENERC_KCAL)\n    const carbs = dataRaw.map(obj => obj.CHOCDF)\n    const dataFormatted = {food, proteins, fiber, fat, calories, carbs}\n    //const dataFormatted = {food, proteins, fiber, fat, carbs}\n    \n    const nutrients = [\"calories\", \"fat\", \"carbs\", \"proteins\", \"fiber\"]\n    //const nutrients = [\"fat\", \"carbs\", \"proteins\", \"fiber\"]\n    let dataTransformed = []\n    for (const nurt of nutrients) {\n      var result = {};\n      dataFormatted.food.forEach((id, i) => result[id] = dataFormatted[nurt][i]);\n      dataTransformed.push({nutrient: nurt, ...result, max: Math.max(...dataFormatted[nurt])})\n    };\n    return dataTransformed\n  } else {\n    return dataRaw\n  }\n};\n\nexport default dataTransform; \n","import React, {useState} from \"react\";\nimport { Paper, Grid, createMuiTheme, ThemeProvider, Box} from \"@material-ui/core\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport SearchBox from \"./Components/SearchBox\";\nimport ImgMediaCard from \"./Components/ImgMediaCard\";\nimport Chart from \"./Components/Chart\";\nimport Header from \"./Components/Header\";\nimport MyResponsiveBar from \"./Components/BarChart\";\nimport CaloriesChart from \"./Components/CaloriesChart\";\nimport RadarChart from \"./Components/RadarChart\";\nimport styles from \"./App.module.css\";\nimport getData from \"./Functionality/api\";\nimport dataTrasform from \"./Functionality/data\";\n\n//utility function \nfunction isNotEmpty(obj) {\n  for(var key in obj) {\n      if(obj.hasOwnProperty(key))\n          return true;\n  }\n  return false;\n}\n\n\nfunction App() {\n\n  /* FUNCTIONALITY */\n\n  /*** Data handling functionality ***/\n\n  const [userInput, setUserInput] = useState(\"\"); //user input into the search for food form\n  const [foodNames, setFoodNames] = useState([]); //current list of food names\n  const [foodData, setFoodData] = useState([]); //current list of food data\n  const [selectedFoodData, setSelectedFoodData] = useState([]); //list of selected food data \n  const [foodTransformed, setFoodTransformed] = useState([]);\n\n\n  // keep track of the current user input into input field\n  function handleUserInput(event){\n    const input = event.target.value;\n    setUserInput(input);\n  }\n\n  //get food info button clicked -> get nutrition data from api and save it in foodNames and foodData\n  async function keepFoods(){\n    try {\n      if (foodData.length<5){\n        const nutrients = await(getData(userInput));\n        if (isNotEmpty(nutrients)){\n          if (!foodNames.includes(userInput)){\n            setFoodNames(prevItem => {\n              return [...foodNames, userInput]\n            });\n            setFoodData(prevItem => {\n              return [...foodData, nutrients]\n            })\n          } \n        }\n      }\n    } catch (error) {\n      console.log(\"Missing food\")\n    }\n    setUserInput(\"\");\n  };\n\n   // see if the checkbox next to each item is checked \n  // if checked, keep the fooddata in the selectedFoodData state; else delete it from there\n  function handleChecked(event, foodId){\n    if (event.target.checked){\n      keepSelectedFoods(foodId)\n    } else {\n      setSelectedFoodData(prevItems => {\n        return prevItems.filter((item, index) => {\n          const currentFood = foodNames[foodId];\n          const currentFoodData = foodData.find(x => x.food === currentFood);\n          return item !== currentFoodData;\n        });\n      });\n    };\n  };\n\n  //keep list of clicked (checked) foods, without repetition\n  function keepSelectedFoods(foodId) {\n    const currentFood = foodNames[foodId];\n    const currentFoodData = foodData.find(x => x.food === currentFood);\n    setSelectedFoodData(prevItems => {\n      if (!prevItems.includes(currentFoodData)){\n        return [...prevItems, currentFoodData]\n      } else {\n        return prevItems\n      }\n    });\n  };\n\n  // transform the data into format expected by chart\n  function handleDataTransform(){\n    console.log(selectedFoodData)\n    const foodDataTransformed = dataTrasform(selectedFoodData)\n    setFoodTransformed(foodDataTransformed);\n  }  \n\n  //clear all the stored food data on clicking \"clear table\"\n  function handleClearTable(){\n    setFoodData([])\n    setFoodNames([])\n    setSelectedFoodData([])\n    setFoodTransformed([])\n  };\n\n  /* THEME */\n\n  const [darkMode, setDarkMode] = useState(true); \n  const theme = createMuiTheme({\n    palette: {\n      type: darkMode ? \"dark\" : \"light\",\n    },\n  });\n\n  const useStyles = makeStyles({\n    root: {\n      margin: 0,\n      padding: 0,\n      height: \"100%\",\n      background: \"linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)\",\n    },\n  });\n\n  const classes = useStyles();\n\n\n\n  return(\n    <ThemeProvider theme={theme}>\n      <Paper className={classes.root} square={true} elevation={0} >\n        <Grid container justify=\"center\" alignItems=\"center\"  direction=\"row\" spacing={0}>\n\n          <Grid item xs={12}>\n            <Header \n              darkMode={darkMode}\n              setDarkMode={setDarkMode}\n            />\n          </Grid>\n\n          <Grid item container justify=\"center\" alignItems=\"center\" xs={11} sm={11} md={12}>\n            <SearchBox \n              handleUserInput={handleUserInput}\n              userInput={userInput}\n              keepFoods={keepFoods}\n            />\n          </Grid>\n\n          <Grid item container justify=\"center\" xs={11} sm={11} md={12}>\n              <ImgMediaCard \n                data={foodData}\n                handleChecked={handleChecked}\n                handleDataTransform={handleDataTransform}\n                handleClearTable={handleClearTable}\n                image={\"https://images.unsplash.com/photo-1506395308321-904a71783d60?ixlib=rb-1.2.1&auto=format&fit=crop&w=930&q=80\"}\n              />\n          </Grid>\n\n\n\n        {isNotEmpty(foodTransformed)? \n        <Grid container justify=\"center\"  > \n          <Grid item xs={11} sm={11} md={5} lg={4}>\n            <MyResponsiveBar data={foodTransformed}/>\n          </Grid>\n          <Grid item xs={11} sm={11} md={5} lg={4}>\n            <RadarChart data={foodTransformed}/>\n          </Grid>\n          <Grid item xs={11} sm={11} md={10} lg={8}>\n            <CaloriesChart data={foodTransformed}/>\n          </Grid>\n        </Grid> : null}    \n\n          \n\n\n        </Grid>\n      </Paper>\n    </ThemeProvider>\n  )\n};\n\n\n//<Paper styles={{color: 'blue'}}>xs=12</Paper>\n//{isNotEmpty(foodTransformed)? <Grid item xs={10} sm={8} md={5}><Chart data={foodTransformed} /></Grid> : null}     \n\nexport default App; ","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <App />,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}